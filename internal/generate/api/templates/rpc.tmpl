// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package {{ .Controller.Name }}

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
    "fmt"
)

// Data structs
{{ range $key, $value := .RPC.CustomTypes }}
type {{ $key }} struct {
{{ range $value }}
    {{ .Name }} {{ .Type }}`json:"{{ .Key }}
    {{- if not .OmitEmpty -}}
    "
    {{- else -}}
    ,omitempty"
    {{- end }}`
{{- end }}
}
{{ end }}

{{- $rpcContext := .RPC -}}
{{ range .RPC.RPCCalls }}
// {{ $rpcContext.Name }}{{ .Name }} executes the {{ .Name }} RPC call of the {{ $rpcContext.Name }} controller 
func (c *Controller) {{ $rpcContext.Name }}{{ .Name }}(ctx context.Context
    {{- range .Parameters -}}
        , {{ .Name }} {{ if .Optional }}*{{ end }}string
    {{- end -}}
    ) (*{{ .ResultType }},error) {

    callParams := []string{}
    bodyParams := make(map[string]interface{})

    {{ range .Parameters }}
    {{- if not .IsBodyParameter }}
    {{- if .Optional }}
    if {{ .Name }} != nil {
    callParams = append(callParams,*{{ .Name }})
    }
    {{- else }}
    callParams = append(callParams,{{ .Name }}) 
    {{- end }}
    {{- else }}
    bodyParams["{{ .Name }}"]={{ .Name }}
    {{- end }}
    {{ end }}

    callOpts := api.RPCOpts{
        BaseEndpoint: "{{ .Endpoint }}",
        Method: "{{ .Method }}",
        PathParameters: callParams,
        BodyParameters: bodyParams,
    }
    
    resultData:=&{{ .ResultType }}{}
    result, err := api.Call(c.Client(), ctx, callOpts, resultData)
    if err != nil {
        return nil,fmt.Errorf("{{ .Name }} call failed: %w", err)
    }
    return result,nil
}
{{- end }}

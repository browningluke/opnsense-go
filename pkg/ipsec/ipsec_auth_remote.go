// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package ipsec

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var IPsecAuthRemoteOpts = api.ReqOpts{
	AddEndpoint:         "/ipsec/connections/add_remote",
	GetEndpoint:         "/ipsec/connections/get_remote",
	UpdateEndpoint:      "/ipsec/connections/set_remote",
	DeleteEndpoint:      "/ipsec/connections/del_remote",
	ReconfigureEndpoint: ipsecReconfigureEndpoint,
	Monad:               "remote",
}

// Data structs

type IPsecAuthRemote struct {
	Enabled        string              `json:"enabled"`
	Connection     api.SelectedMap     `json:"connection"`
	Round          string              `json:"round"`
	Authentication api.SelectedMap     `json:"auth"`
	Id             string              `json:"id"`
	EAPId          string              `json:"eap_id"`
	Certificates   api.SelectedMapList `json:"certs"`
	PublicKeys     api.SelectedMapList `json:"public_keys"`
	Description    string              `json:"description"`
}

// CRUD operations

func (c *Controller) AddIPsecAuthRemote(ctx context.Context, resource *IPsecAuthRemote) (string, error) {
	return api.Add(c.Client(), ctx, IPsecAuthRemoteOpts, resource)
}

func (c *Controller) GetIPsecAuthRemote(ctx context.Context, id string) (*IPsecAuthRemote, error) {
	return api.Get(c.Client(), ctx, IPsecAuthRemoteOpts, &IPsecAuthRemote{}, id)
}

func (c *Controller) UpdateIPsecAuthRemote(ctx context.Context, id string, resource *IPsecAuthRemote) error {
	return api.Update(c.Client(), ctx, IPsecAuthRemoteOpts, resource, id)
}

func (c *Controller) DeleteIPsecAuthRemote(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, IPsecAuthRemoteOpts, id)
}

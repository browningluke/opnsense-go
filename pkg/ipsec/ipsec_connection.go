// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package ipsec

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var IPsecConnectionOpts = api.ReqOpts{
	AddEndpoint:         "/ipsec/connections/add_connection",
	GetEndpoint:         "/ipsec/connections/get_connection",
	UpdateEndpoint:      "/ipsec/connections/set_connection",
	DeleteEndpoint:      "/ipsec/connections/del_connection",
	ReconfigureEndpoint: ipsecReconfigureEndpoint,
	Monad:               "connection",
}

// Data structs

type IPsecConnection struct {
	Enabled                string              `json:"enabled"`
	Proposals              api.SelectedMapList `json:"proposals"`
	Unique                 api.SelectedMap     `json:"unique"`
	Aggressive             string              `json:"aggressive"`
	Version                api.SelectedMap     `json:"version"`
	Mobike                 string              `json:"mobike"`
	LocalAddresses         api.SelectedMapList `json:"local_addrs"`
	RemoteAddresses        api.SelectedMapList `json:"remote_addrs"`
	LocalPort              api.SelectedMap     `json:"local_port"`
	RemotePort             api.SelectedMap     `json:"remote_port"`
	UDPEncapsulation       string              `json:"encap"`
	ReauthenticationTime   string              `json:"reauth_time"`
	RekeyTime              string              `json:"rekey_time"`
	IKELifetime            string              `json:"over_time"`
	DPDDelay               string              `json:"dpd_delay"`
	DPDTimeout             string              `json:"dpd_timeout"`
	IPPools                api.SelectedMapList `json:"pools"`
	SendCertificateRequest string              `json:"send_certreq"`
	SendCertificate        api.SelectedMap     `json:"send_cert"`
	KeyingTries            string              `json:"keyingtries"`
	Description            string              `json:"description"`
}

// CRUD operations

func (c *Controller) AddIPsecConnection(ctx context.Context, resource *IPsecConnection) (string, error) {
	return api.Add(c.Client(), ctx, IPsecConnectionOpts, resource)
}

func (c *Controller) GetIPsecConnection(ctx context.Context, id string) (*IPsecConnection, error) {
	return api.Get(c.Client(), ctx, IPsecConnectionOpts, &IPsecConnection{}, id)
}

func (c *Controller) UpdateIPsecConnection(ctx context.Context, id string, resource *IPsecConnection) error {
	return api.Update(c.Client(), ctx, IPsecConnectionOpts, resource, id)
}

func (c *Controller) DeleteIPsecConnection(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, IPsecConnectionOpts, id)
}

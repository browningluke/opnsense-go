// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package firewall

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var NatOneToOneOpts = api.ReqOpts{
	AddEndpoint:         "/firewall/one_to_one/addRule",
	GetEndpoint:         "/firewall/one_to_one/getRule",
	UpdateEndpoint:      "/firewall/one_to_one/setRule",
	DeleteEndpoint:      "/firewall/one_to_one/delRule",
	ReconfigureEndpoint: "/firewall/one_to_one/apply",
	Monad:               "rule",
}

// Data structs

type NatOneToOne struct {
	Enabled           string              `json:"enabled"`
	Log               string              `json:"log"`
	Sequence          string              `json:"sequence"`
	Interface         api.SelectedMap     `json:"interface"`
	Type              api.SelectedMap     `json:"type"`
	SourceNet         string              `json:"source_net"`
	SourceInvert      string              `json:"source_not"`
	DestinationNet    string              `json:"destination_net"`
	DestinationInvert string              `json:"destination_not"`
	ExternalNet       string              `json:"external"`
	NatReflection     api.SelectedMap     `json:"natreflection"`
	Categories        api.SelectedMapList `json:"categories"`
	Description       string              `json:"description"`
}

// CRUD operations

func (c *Controller) AddNatOneToOne(ctx context.Context, resource *NatOneToOne) (string, error) {
	return api.Add(c.Client(), ctx, NatOneToOneOpts, resource)
}

func (c *Controller) GetNatOneToOne(ctx context.Context, id string) (*NatOneToOne, error) {
	return api.Get(c.Client(), ctx, NatOneToOneOpts, &NatOneToOne{}, id)
}

func (c *Controller) UpdateNatOneToOne(ctx context.Context, id string, resource *NatOneToOne) error {
	return api.Update(c.Client(), ctx, NatOneToOneOpts, resource, id)
}

func (c *Controller) DeleteNatOneToOne(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, NatOneToOneOpts, id)
}

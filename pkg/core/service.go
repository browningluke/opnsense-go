// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package core

import (
	"context"
	"fmt"
	"github.com/browningluke/opnsense-go/pkg/api"
)

// Data structs

type SearchServicesResponse struct {
	Total    int           `json:"total"`
	RowCount int           `json:"rowCount"`
	Current  int           `json:"current"`
	Rows     []ServiceItem `json:"rows"`
}

type ServiceActionResult struct {
	Result string `json:"result"`
}

type ServiceItem struct {
	ID          string `json:"id"`
	Locked      int    `json:"locked"`
	Running     int    `json:"running"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// ServiceSearch executes the Search RPC call of the Service controller
func (c *Controller) ServiceSearch(ctx context.Context) (*SearchServicesResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/service/search",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &SearchServicesResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Search call failed: %w", err)
	}
	return result, nil
}

// ServiceStart executes the Start RPC call of the Service controller
func (c *Controller) ServiceStart(ctx context.Context, id string) (*ServiceActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, id)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/service/start",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &ServiceActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Start call failed: %w", err)
	}
	return result, nil
}

// ServiceStop executes the Stop RPC call of the Service controller
func (c *Controller) ServiceStop(ctx context.Context, id string) (*ServiceActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, id)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/service/stop",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &ServiceActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Stop call failed: %w", err)
	}
	return result, nil
}

// ServiceRestart executes the Restart RPC call of the Service controller
func (c *Controller) ServiceRestart(ctx context.Context, id string) (*ServiceActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, id)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/service/restart",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &ServiceActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Restart call failed: %w", err)
	}
	return result, nil
}

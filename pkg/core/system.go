// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package core

import (
	"context"
	"fmt"
	"github.com/browningluke/opnsense-go/pkg/api"
)

// Data structs

type Status struct {
	StatusCode  int    `json:"statusCode"`
	Message     string `json:"message"`
	LogLocation string `json:"logLocation"`
	Timestamp   string `json:"timestamp"`
	Status      string `json:"status"`
}

type SystemStatus struct {
	CrashReporter Status `json:"CrashReporter"`
	Firewall      Status `json:"Firewall"`
	System        Status `json:"System"`
}

// SystemHalt executes the Halt RPC call of the System controller
func (c *Controller) SystemHalt(ctx context.Context) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/system/halt",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Halt call failed: %w", err)
	}
	return result, nil
}

// SystemReboot executes the Reboot RPC call of the System controller
func (c *Controller) SystemReboot(ctx context.Context) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/system/reboot",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Reboot call failed: %w", err)
	}
	return result, nil
}

// SystemStatus executes the Status RPC call of the System controller
func (c *Controller) SystemStatus(ctx context.Context) (*SystemStatus, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/system/status",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &SystemStatus{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Status call failed: %w", err)
	}
	return result, nil
}

// SystemDismissStatus executes the DismissStatus RPC call of the System controller
func (c *Controller) SystemDismissStatus(ctx context.Context, subject string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["subject"] = subject

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/system/dismiss_status",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DismissStatus call failed: %w", err)
	}
	return result, nil
}

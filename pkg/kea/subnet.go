// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package kea

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var SubnetOpts = api.ReqOpts{
	AddEndpoint:         "/kea/dhcpv4/add_subnet",
	GetEndpoint:         "/kea/dhcpv4/get_subnet",
	UpdateEndpoint:      "/kea/dhcpv4/set_subnet",
	DeleteEndpoint:      "/kea/dhcpv4/del_subnet",
	ReconfigureEndpoint: keaReconfigureEndpoint,
	Monad:               "subnet4",
}

// Data structs

type OptionData struct {
	DomainNameServers api.SelectedMapList `json:"domain_name_servers"`
	DomainSearch      api.SelectedMapList `json:"domain_search"`
	Routers           api.SelectedMapList `json:"routers"`
	StaticRoutes      string              `json:"static_routes"`
	DomainName        string              `json:"domain_name"`
	NtpServers        api.SelectedMapList `json:"ntp_servers"`
	TimeServers       api.SelectedMapList `json:"time_servers"`
	TftpServerName    string              `json:"tftp_server_name"`
	BootFileName      string              `json:"boot_file_name"`
}

type Subnet struct {
	Subnet                string     `json:"subnet"`
	NextServer            string     `json:"next_server"`
	Pools                 string     `json:"pools"`
	MatchClientId         string     `json:"match-client-id"`
	OptionDataAutoCollect string     `json:"option_data_autocollect"`
	OptionData            OptionData `json:"option_data"`
	Description           string     `json:"description"`
}

// CRUD operations

func (c *Controller) AddSubnet(ctx context.Context, resource *Subnet) (string, error) {
	return api.Add(c.Client(), ctx, SubnetOpts, resource)
}

func (c *Controller) GetSubnet(ctx context.Context, id string) (*Subnet, error) {
	return api.Get(c.Client(), ctx, SubnetOpts, &Subnet{}, id)
}

func (c *Controller) UpdateSubnet(ctx context.Context, id string, resource *Subnet) error {
	return api.Update(c.Client(), ctx, SubnetOpts, resource, id)
}

func (c *Controller) DeleteSubnet(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, SubnetOpts, id)
}
